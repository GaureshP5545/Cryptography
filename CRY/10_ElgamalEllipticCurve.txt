java

import java.math.*;
import java.util.*;
import java.security.*;
import java.io.*;
public class EIGamal
{
public static void main(String[] args)
throws IOException
{
	BigInteger p,b,c,secretkey;
	Random sc=new SecureRandom();
	secretkey=new BigInteger("12345678901234567890");
	System.out.println("secretKey="+ secretkey);
	p=BigInteger.probablePrime(64,sc);
	b=new BigInteger("3");
	c=b.modPow(secretkey,p);
	System.out.println("p="+p);
	System.out.println("b="+b);
	System.out.println("c="+c);
//Encryption
             System.out.print("Enter your Big Number message-");
	Scanner sca=new Scanner(System.in);
	String s=sca.nextLine();
	BigInteger x=new BigInteger(s);
	BigInteger r=new BigInteger(64,sc);
	BigInteger EC=x.multiply(c.modPow(r,p)).mod(p);
	BigInteger brmodp=b.modPow(r,p);
	System.out.println("Plaintext="+x);
	System.out.println("r="+r);
	System.out.println("EC="+EC);
	System.out.println("b^r mod p="+brmodp);
//decryption
            BigInteger crmodp=brmodp.modPow(secretkey,p);
	BigInteger d=crmodp.modInverse(p);
	BigInteger ad=d.multiply(EC).mod(p);
	System.out.println("\n\nc^r mod p="+crmodp);
	System.out.println("d="+d);
	System.out.println("Alice decodes:"+ad);
}
}



jupiter

from tinyec import registry
import secrets
curve = registry.get_curve('secp192r1')
def compress_point(point):
    return hex(point.x) + hex(point.y % 2)[2:]

def ecc_calc_encryption_keys(pubKey):
    ciphertextPrivKey = secrets.randbelow(curve.field.n)
    ciphertextPubKey = ciphertextPrivKey * curve.g
    sharedECCKey = pubKey * ciphertextPrivKey
    return (sharedECCKey, ciphertextPubKey)

def ecc_calc_decryption_key(privKey, ciphertextPubKey):
    sharedECCKey = ciphertextPubKey * privKey
    return sharedECCKey
# Generate a key pair for Bob
bob_priv_key = secrets.randbelow(curve.field.n)
bob_pub_key = bob_priv_key * curve.g
print("Bob's private key:", hex(bob_priv_key))
print("Bob's public key:", compress_point(bob_pub_key))
print("\n")
# Generate a key pair for Alice
alice_priv_key = secrets.randbelow(curve.field.n)
alice_pub_key = alice_priv_key * curve.g
print("Alice's private key:", hex(alice_priv_key))
print("Alice's public key:", compress_point(alice_pub_key))
print("\n")
# Alice generates an encryption key and ciphertext public key using Bob's public key
(encrypt_key, ciphertext_pub_key) = ecc_calc_encryption_keys(bob_pub_key)
print("Ciphertext public key:", compress_point(ciphertext_pub_key))
print("Encryption key:", compress_point(encrypt_key))
print("\n")
# Bob calculates the decryption key using his private key and Alice's ciphertext public key
decrypt_key = ecc_calc_decryption_key(bob_priv_key, ciphertext_pub_key)
print("Decryption key:", compress_point(decrypt_key))