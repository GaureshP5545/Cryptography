substitution =====jupiter

import string
all_letters= string.ascii_letters
dict1 = { }
key = 4
print(all_letters)

for i in range(len(all_letters)):
    # print("Value of i",i)
    # print("Lenght:=",len(all_letters))
    dict1[all_letters[i]]=all_letters[(i+key)%len(all_letters)]
    # print("Dictionary 1 :",dict1)
plain_txt="Hello"
print("Plain Text:",plain_txt)
cipher_txt=[]
for char in plain_txt:
        print("character:",char)
        if char in all_letters:
            temp=dict1[char]
            print("Tempo:",temp)
            cipher_txt.append(temp)
        else:
            temp=char
            cipher_txt.append(temp)
cipher_txt="".join(cipher_txt)
print("Cipher Text is:",cipher_txt)
dict2={ }
for i in range(len(all_letters)):
               # print("i---",i)
               # print("key:", key)
                #print("Lenght:",len(all_letters))
                dict2[all_letters[i]]=all_letters[(i-key)%(len(all_letters))]
               # print("Dictionary 2:",dict2)
decrypt_txt=[]
for char in cipher_txt:
    if char in all_letters:
                        temp=dict2[char]
                        decrypt_txt.append(temp)
    else:
                        temp=char
                        decrypt_txt.append(temp)
decrypt_txt="".join(decrypt_txt)
print("Recovoered plain text:",decrypt_txt)

Affine=====jupiter
def egcd(a,b):
    x,y,u,v=0,1,1,0
    while a!=0:
        q,r=b//a,b%a
        m,n=x-u*q,y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y
def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd!=1:
        return None
    else:
        return x%m
def affine_encrypt(text,key):
    return "".join([ chr((( key[0]*(ord(t) - ord('A')) + key[1] ) % 26)+ ord('A')) for t in text.upper().replace(' ','' ) ])
def affine_decrypt(cipher,key):
    return "".join([ chr((( modinv(key[0], 26)*(ord(c) - ord('A') - key[1]))% 26) + ord('A')) for c in cipher ])
def aff_main():
    text='AFFINE CIPHER'
    key=[17,20]
    affine_encrypted_text=affine_encrypt(text,key)
    print('Encrypted Text:', affine_encrypted_text)
    print('Decrypted Text:', affine_decrypt(affine_encrypted_text, key) ) 
#if __name__=='_main_':
aff_main()

Vigenere ====java
public class VignereCipherJava
{
	public static void main(String[]s)
	{
		String message= "HELLOWORLD";
		char msg[]=new char[message.length()];
		msg= getChars(message);
		System.out.println(msg);

		String key2="LOCK";
		char key[]=new char[key2.length()];
		key=getChars(key2);
		System.out.println(key);
		
		int msgLen=msg.length,i,j;
		System.out.println("length is"+msgLen);
		char newKey[]=new char[msgLen];
		char encryptedMsg[]=new char[msgLen];
		char decryptedMsg[]= new char[msgLen];

		for(i=0,j=0;i<msgLen;++i,++j)
		{
			if(j==key.length)
			j=0;
			newKey[i]=key[j];
		}

		for(i=0;i< msgLen;++i)
		{
			encryptedMsg[i]=(char)(((msg[i]+newKey[i])%26)+'A');
		}
		for(i=0;i<msgLen;++i)
		{
			decryptedMsg[i]=(char)((((encryptedMsg[i]-newKey[i])+26)%26)+'A');  
		} 


			System.out.println("Original Message: " + String.valueOf(msg)); 							//String.valueOf(convertscharacter array to String
 			System.out.println("Key: " + String.valueOf(key));
 			System.out.println("Generated Key: " + String.valueOf(newKey));
 			System.out.println("\nEncrypted Message: " + String.valueOf(encryptedMsg));
 			System.out.println("\nDecrypted Message: " + String.valueOf(decryptedMsg));
	}

	private static char[] getChars(String message) 
	{
 		char msg1[] = new char[message.length()];
 		for (int ii = 0; ii < message.length(); ii++) 
		{
 			char c = message.charAt(ii);
 			if(c!=' ')
			{
 				msg1[ii] = c;
 			}
 		}
 		return msg1;
 	}
} 
